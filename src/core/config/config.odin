package config
import "core:os"
import "core:fmt"
import "core:strings"
import "../../utils/errors"
import "../../utils/logging"


OST_Configs:: struct
{
  name:string
  type:string //a toggle(the user can change) or a static value
  value:string
  status:bool //if the config is active or not... might not use this
}

ostrich_config_msg:= "#This file was generated by the Ostrich Database Engine\n#Do NOT modify this file unless you know what you are doing\n#For more information on the Ostrich Database Engine visit: https://github.com/SchoolyB/Ostrich"


OST_CHECK_IF_CONFIG_FILE_EXISTS ::proc() -> bool
{
	configExists:bool
  configPath,e := os.open("../bin")
  defer os.close(configPath)
	
  foundFiles, err := os.read_dir(configPath, -1)
  for file in foundFiles {
		if file.name == "ostrich.config"
		{
			configExists = true
		}
  }
	fmt.println(configExists)
	return configExists
}

//the config file will contain info like: has the initial user setup been done, engine settings, etc
OST_CREATE_CONFIG_FILE :: proc() -> bool
{
	configPath:= "../bin/ostrich.config"
	file,e:= os.open(configPath, os.O_CREATE, 0o666)
	os.close(file)
	if  e != 0
	{
			errors.throw_utilty_error(1, "Error creating config file", "OST_GENERATE_CONFIG")
			logging.log_utils_error("Error creating config file", "OST_GENERATE_CONFIG")
			return false
		}
		msg:= transmute([]u8)ostrich_config_msg
		os.open(configPath, os.O_APPEND | os.O_WRONLY, 0o666)
		defer os.close(file)
		writter,ok:= os.write(file,msg)
		if ok != 0
		{
			errors.throw_utilty_error(1, "Error writing to config file", "OST_GENERATE_CONFIG")
			logging.log_utils_error("Error writing to config file", "OST_GENERATE_CONFIG")
			return false
		}
	return true
}

